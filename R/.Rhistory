predictors <- read.csv("/Users/violetevans/Documents/side project/final_gs.csv")
predictors <- read.csv("/Users/violetevans/xialongbao/ Data/all_logi.csv")
predictors <- read.csv("/Users/violetevans/xiaolongbao/ Data/all_logi.csv")
predictors <- read.csv("/Users/violetevans/xiaolongbao/ Data/all_logi.csv")
getwd()
predictors <- read.csv("/Users/violetevans/xiaolongbao/Data/all_logi.csv")
head(predictors)
length(predictors)
nyc<- predictors[predictors$source=="nyc_boba", 1:15]
rownames(nyc) <- 1:nrow(nyc)
nyc_rating <- predictors$Rating[predictors$source == "nyc_boba"]
all_cat<- unlist(strsplit(nyc$Categories, ","))
all_cat<- str_trim(all_cat)
all_cat
#all_cat<- str_trim(all_cat)
#26 unique categories
clean_names <-janitor::make_clean_names(unique(all_cat))
clean_names
var <- paste0(clean_names,"_ind")
mat=  matrix(0, nrow(nyc), 19)
colnames(mat)<- var
library(stringr)
all_cat<- unlist(strsplit(nyc$Categories, ","))
all_cat<- str_trim(all_cat)
all_cat
#26 unique categories
clean_names <-janitor::make_clean_names(unique(all_cat))
var <- paste0(clean_names,"_ind")
var
mat=  matrix(0, nrow(nyc), 19)
mat
colnames(mat)<- var
mat
df <- data.frame(mat)
nyc_df <- cbind(nyc, df)
full_names<- unique(all_cat)
for (i in seq_along(1:19)){
for (j in 1:nrow(nyc)){
nyc_df[[var[i]]][j]= grepl(full_names[i], nyc$Categories[j])
}
}
table(colSums(nyc_df != 0) == 0)
nyc_df
raleigh<- predictors[predictors$source=="raleigh_boba",1:15]
rownames(raleigh) <- 1:nrow(raleigh)
raleigh_rating<- predictors$Rating[predictors$source == "raleigh_boba"]
all_cat1<- unlist(strsplit(raleigh$Categories, ","))
all_cat1 <- str_trim(all_cat1)
unique(all_cat1)
#16 unique categories
clean_names1 <-janitor::make_clean_names(unique(all_cat1))
var1 <- paste0(clean_names1,"_ind")
mat1<- matrix(0, nrow(raleigh), 16)
colnames(mat1)<- var1
df1 <- data.frame(mat1)
raleigh_df <- cbind(raleigh, df1)
full_names1 <- unique(all_cat1)
for (i in seq_along(1:16)){
for (j in 1:nrow(raleigh)){
raleigh_df[[var1[i]]][j]= grepl(full_names1[i], raleigh$Categories[j])
}
}
raleigh
clean_names1 <-janitor::make_clean_names(unique(all_cat1))
var1 <- paste0(clean_names1,"_ind")
mat1<- matrix(0, nrow(raleigh), 16)
colnames(mat1)<- var1
df1 <- data.frame(mat1)
raleigh_df <- cbind(raleigh, df1)
df1
raleigh_df <- cbind(raleigh, df1)
raleigh_df
raleigh_df
table(colSums(raleigh_df != 0) == 0)
nyc_df$bubble_tea_ind
raleigh_df$bubble_tea_ind
nyc_df$bubble_tea_ind<- NULL
raleigh_df$bubble_tea_ind<- NULL
nyc_df$Rating <- as.numeric(nyc_df$Rating)
nyc_df$Rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(3,13:33)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(3,13:33)])
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
nyc_df$bubble_tea_ind<- NULL
nyc_df[,c(3,13:33)]<- nyc_df[,c(3,13:33)]
nyc_df[,c(3,13:33)]<- lapply(nyc_df[,c(3,13:33)], function(col) factor(col))
nyc_df$Rating <- as.numeric(nyc_df$Rating)
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(3,13:33)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(3,13:33)])
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
step.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "both", k = 2)
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
empty.model <- lm(Rating ~ 1, data = raleigh_df[,c(3,13:31)])
raleigh_df[, c(13:31)] <- lapply(raleigh_df[, c(13:31)], function(col) factor(col))
full.model <- lm(Rating ~  ., data = raleigh_df[,c(3,13:31)])
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
raleigh_df
full.model <- lm(Rating ~  ., data = raleigh_df)
full.model <- lm(Rating ~  ., data = raleigh_df[,c(3,13:31)])
raleigh_df[,c(3,13:31)]
raleigh_df[3]
View(raleigh_df)
raleigh_df[, c(13:31)] <- lapply(raleigh_df[, c(13:31)], function(col) factor(col))
library(dplyr)
raleigh_df[, c(13:31)] <- lapply(raleigh_df[, c(13:31)], function(col) factor(col))
raleigh_df[,31]
View(raleigh)
View(raleigh_df)
raleigh_df[, c(13:31)] <- lapply(raleigh_df[, c(13:30)], function(col) factor(col))
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
full.model <- lm(Rating ~  ., data = raleigh_df[,c(3,13:30)])
raleigh_df[,13:31] <- as.factor(raleigh_df[,13:31])
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
#Make the binary columns 13 to 31 as factors
raleigh_df[, c(13:31)] <- lapply(raleigh_df[, c(13:30)], function(col) factor(col))
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
full.model <- lm(Rating ~  ., data = raleigh_df[,c(3,13:30)])
unique(raleigh_df[, c(13:31)])
library(randomForest)
set.seed(12345)
rf.ames <- randomForest(Rating ~ ., data = nyc_df, ntree = 250, importance = TRUE)
nyc_df <- mice::mice(nyc_df)
View(nyc_df)
library(stringr)
library(dplyr)
#this dataset was scraped to include reviews, longitudes, and latitudes
predictors <- read.csv("/Users/violetevans/xiaolongbao/Data/all_logi.csv")
length(predictors)
nyc<- predictors[predictors$source=="nyc_boba", 1:15]
rownames(nyc) <- 1:nrow(nyc)
nyc_rating <- predictors$Rating[predictors$source == "nyc_boba"]
all_cat<- unlist(strsplit(nyc$Categories, ","))
all_cat<- str_trim(all_cat)
#26 unique categories
clean_names <- janitor::make_clean_names(unique(all_cat))
var <- paste0(clean_names,"_ind")
mat=  matrix(0, nrow(nyc), 19)
colnames(mat)<- var
df <- data.frame(mat)
nyc_df <- cbind(nyc, df)
full_names<- unique(all_cat)
for (i in seq_along(1:19)){
for (j in 1:nrow(nyc)){
nyc_df[[var[i]]][j]= grepl(full_names[i], nyc$Categories[j])
}
}
nyc_df
table(colSums(nyc_df != 0) == 0)
table(colSums(nyc_df != 0) == 0)
nyc_df
head(nyc_df)
#check for missing values
missing_counts <- colSums(is.na(nyc_df))
missing_counts
nyc_df$Phone <- NULL
library(randomForest)
set.seed(12345)
rf.ames <- randomForest(Rating ~ ., data = nyc_df, ntree = 250, importance = TRUE)
varImpPlot(rf.ames,
sort = TRUE,
n.var = 10,
main = "Top 10 - Variable Importance", type = 1)
nyc_df$Categories
nyc_df$Categories<- NULL
#The columns with binary values should become factors
nyc_df[,c(3,13:33)]<- lapply(nyc_df[,c(3,13:32)], function(col) factor(col))
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(3,13:32)])
#The columns with binary values should become factors
nyc_df[,c(3,13:33)]<- lapply(nyc_df[,c(3,13:32)], function(col) factor(col))
#Rating should be numeric
nyc_df$Rating <- as.numeric(nyc_df$Rating)
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(3, 13:32)])
nyc_df[,c(3, 13:32)]
View(nyc_df)
where(nyc_df$Authenticity)
column_index <- which(colnames(nyc_df) == Authenticity)
column_index <- which(colnames(nyc_df) == Authenticity)
column_index <- which(colnames(nyc_df) == nyc_df$Authenticity)
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 13:32)])
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 11:32)])
raleigh_df$Phone <- NULL
raleigh_df$Categories<- NULL
raleigh_df$bubble_tea_ind<- NULL
raleigh_df$Phone <- NULL
raleigh_df$Categories<- NULL
#Make the binary columns 13 to 31 as factors
raleigh_df[, c(13:29)] <- lapply(raleigh_df[, c(13:29)], function(col) factor(col))
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
full.model <- lm(Rating ~  ., data = raleigh_df[,c(3,13:29)])
full.model <- lm(Rating ~  ., data = raleigh_df[,c(2,13:29)])
View(raleigh_df)
raleigh_df[, c(13:29)] <- lapply(raleigh_df[, c(13:29)], function(col) factor(col))
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
full.model <- lm(Rating ~  ., data = raleigh_df[,c(2,11:29)])
#Let's check missing counts before building linear regression
missing_counts <- colSums(is.na(raleigh_df))
missing_counts
#Let's check missing counts before building linear regression
missing_counts <- colSums(is.na(raleigh_df))
missing_counts
raleigh_df$Street.Address <- na_mean(raleigh_df$Street.Address)
raleigh_df$Street.Address_flag <- ifelse(is.na(raleigh_df[, "Street Address"]), 1, 0)
raleigh_df$Street.Address_flag <- ifelse(is.na(raleigh_df[, "Street.Address"]), 1, 0)
for (col in colnames(raleigh_df)){
count= sum(is.na(raleigh_df[[col]]))
if (count >0){
print(sum(is.na(raleigh_df[[col]])))
raleigh_df[[col]]<- ifelse(is.na(raleigh_df[[col]]),"M", raleigh_df[[col]])
}
}
missing_counts <- colSums(is.na(raleigh_df))
missing_counts
library(stringr)
library(dplyr)
#this dataset was scraped to include reviews, longitudes, and latitudes
predictors <- read.csv("/Users/violetevans/xiaolongbao/Data/all_logi.csv")
length(predictors)
nyc<- predictors[predictors$source=="nyc_boba", 1:15]
rownames(nyc) <- 1:nrow(nyc)
nyc_rating <- predictors$Rating[predictors$source == "nyc_boba"]
all_cat<- unlist(strsplit(nyc$Categories, ","))
all_cat<- str_trim(all_cat)
#26 unique categories
clean_names <- janitor::make_clean_names(unique(all_cat))
var <- paste0(clean_names,"_ind")
mat=  matrix(0, nrow(nyc), 19)
colnames(mat)<- var
df <- data.frame(mat)
nyc_df <- cbind(nyc, df)
full_names<- unique(all_cat)
for (i in seq_along(1:19)){
for (j in 1:nrow(nyc)){
nyc_df[[var[i]]][j]= grepl(full_names[i], nyc$Categories[j])
}
}
head(nyc_df)
#check for missing values
missing_counts <- colSums(is.na(nyc_df))
missing_counts
#We don't need the following columns, this is what we used to identify the shops and scrape them
nyc_df$bubble_tea_ind<- NULL
nyc_df$Phone <- NULL
nyc_df$Categories<- NULL
missing_counts
raleigh<- predictors[predictors$source=="raleigh_boba",1:15]
rownames(raleigh) <- 1:nrow(raleigh)
raleigh_rating<- predictors$Rating[predictors$source == "raleigh_boba"]
all_cat1<- unlist(strsplit(raleigh$Categories, ","))
all_cat1 <- str_trim(all_cat1)
unique(all_cat1)
#16 unique categories
clean_names1 <-janitor::make_clean_names(unique(all_cat1))
var1 <- paste0(clean_names1,"_ind")
mat1<- matrix(0, nrow(raleigh), 16)
colnames(mat1)<- var1
df1 <- data.frame(mat1)
raleigh_df <- cbind(raleigh, df1)
full_names1 <- unique(all_cat1)
for (i in seq_along(1:16)){
for (j in 1:nrow(raleigh)){
raleigh_df[[var1[i]]][j]= grepl(full_names1[i], raleigh$Categories[j])
}
}
#We don't need the following columns, this is what we used to identify the shops and scrape them
raleigh_df$bubble_tea_ind<- NULL
raleigh_df$Phone <- NULL
raleigh_df$Categories<- NULL
#Let's check missing counts before building linear regression
missing_counts <- colSums(is.na(raleigh_df))
missing_counts
for (col in colnames(raleigh_df)){
count= sum(is.na(raleigh_df[[col]]))
if (count >0){
print(sum(is.na(raleigh_df[[col]])))
raleigh_df[[col]]<- ifelse(is.na(raleigh_df[[col]]),"M", raleigh_df[[col]])
}
}
missing_counts
missing_counts <- colSums(is.na(raleigh_df))
missing_counts
#The columns with binary values should become factors
nyc_df[,c(3,13:32)]<- lapply(nyc_df[,c(3,13:32)], function(col) factor(col))
#The columns with binary values should become factors
nyc_df[,c(3,11:32)]<- lapply(nyc_df[,c(3,11:32)], function(col) factor(col))
nyc_df[,c(3,11:32)
]
#The columns with binary values should become factors
nyc_df[,c(3,11:31)]<- lapply(nyc_df[,c(3,11:31)], function(col) factor(col))
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 11:31)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(2,13:31)])
#The columns with binary values should become factors
nyc_df[,c(3,11:31)]<- lapply(nyc_df[,c(3,11:31)], function(col) factor(col))
#Rating should be numeric
nyc_df$Rating <- as.numeric(nyc_df$Rating)
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 11:31)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(2,13:31)])
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
nyc_df$Authenticity
View(nyc_df)
#The columns with binary values should become factors
nyc_df[,c(3,11:31)]<- lapply(nyc_df[,c(3,11:31)], function(col) factor(col))
#Rating should be numeric
nyc_df$Rating <- as.numeric(nyc_df$Rating)
nyc_df$Authenticity <- as.numeric(nyc_df$Authenticity)
nyc_df$Restaurant <- as.numeric(nyc_df$Restaurant)
nyc_df$chain<- as.numeric(nyc_df$chain)
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 11:31)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(2,13:31)])
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
library(randomForest)
set.seed(12345)
rf.ames <- randomForest(Rating ~ ., data = nyc_df, ntree = 250, importance = TRUE)
#Make the binary columns 13 to 31 as factors
raleigh_df[, c(13:29)] <- lapply(raleigh_df[, c(13:29)], function(col) factor(col))
#Make the binary columns 13 to 31 as factors
raleigh_df[, c(13:28)] <- lapply(raleigh_df[, c(13:28)], function(col) factor(col))
#Rating should be numeric
raleigh_df$Rating <- as.numeric(raleigh_df$Rating)
full.model <- lm(Rating ~  ., data = raleigh_df[,c(2,11:28)])
empty.model <- lm(Rating ~ 1, data = raleigh_df[,c(2,11:28)])
for.model.raleigh <- step(empty.model, scope = list(lower = empty.model, upper = full.model), direction = "forward", k = 2)
boxplot(Rating ~ Authenticity, data = raleigh_df,
main = "Boxplot of Raleigh Boba by Authenticity",
xlab = "Authenticity",
ylab = "Rating",
col = c("skyblue", "salmon"),
border = "black")
boxplot(Rating ~ Authenticity, data = nyc_df,
main = "Boxplot of NYC Boba by Authenticity",
xlab = "Authenticity",
ylab = "Rating",
col = c("skyblue", "salmon"),
border = "black")
boxplot(Rating ~ source, data = predictors)
ggplot(data = nyc_df) + geom_histogram(mapping = aes(x = Rating)) + labs(x = "Rating Counts (NYC)")
set.seed(12345)
rf.raleigh <- randomForest(Rating ~ ., data = raleigh_df, ntree = 250, importance = TRUE)
varImpPlot(rf.raleigh ,
sort = TRUE,
n.var = 10,
main = "Top 10 - Variable Importance", type = 1)
varImpPlot(rf.raleigh ,
sort = TRUE,
n.var = 10,
main = "Top 10 - Variable Importance for Raleigh", type = 1)
#Run a random forest model for NYC
set.seed(12345)
rf.nyc <- randomForest(Rating ~ ., data = nyc_df, ntree = 250, importance = TRUE)
nyc_df$Rating
#Rating should be numeric
nyc_df$Rating <- as.numeric(nyc_df$Rating)
#Rating should be numeric
nyc_df$Rating <- as.factor(nyc_df$Rating)
#Make columns their appropriate types
raleigh_df$Rating <- as.factor(raleigh$Rating)
#Make columns their appropriate types
raleigh_df$Rating <- as.factor(raleigh$Rating)
raleigh_df$Authenticity <- as.numeric(raleigh_df$Authenticity)
raleigh_df$Restaurant <- as.numeric(raleigh_df$Restaurant)
raleigh_df$chain<- as.numeric(raleigh_df$chain)
#Run a random forest model for NYC
set.seed(12345)
rf.nyc <- randomForest(Rating ~ ., data = nyc_df, ntree = 250, importance = TRUE)
varImpPlot(rf.nyc,
sort = TRUE,
n.var = 10,
main = "Top 10 - Variable Importance for NYC", type = 1)
summary(nyc_df)
unique(nyc_df$Street.Address)
nyc_df[, c(11:31)] <- lapply(nyc_df[, c(11:31)], function(col) factor(col))
rf.nyc <- randomForest(Rating ~ ., data = nyc_df, ntree = 250, importance = TRUE)
library(stringr)
library(dplyr)
#this dataset was scraped to include reviews, longitudes, and latitudes
predictors <- read.csv("/Users/violetevans/xiaolongbao/Data/all_logi.csv")
length(predictors)
nyc<- predictors[predictors$source=="nyc_boba", 1:15]
rownames(nyc) <- 1:nrow(nyc)
nyc_rating <- predictors$Rating[predictors$source == "nyc_boba"]
all_cat<- unlist(strsplit(nyc$Categories, ","))
all_cat<- str_trim(all_cat)
#26 unique categories
clean_names <- janitor::make_clean_names(unique(all_cat))
var <- paste0(clean_names,"_ind")
mat=  matrix(0, nrow(nyc), 19)
colnames(mat)<- var
df <- data.frame(mat)
nyc_df <- cbind(nyc, df)
full_names<- unique(all_cat)
for (i in seq_along(1:19)){
for (j in 1:nrow(nyc)){
nyc_df[[var[i]]][j]= grepl(full_names[i], nyc$Categories[j])
}
}
head(nyc_df)
#check for missing values
missing_counts <- colSums(is.na(nyc_df))
missing_counts
#We don't need the following columns, this is what we used to identify the shops and scrape them
nyc_df$bubble_tea_ind<- NULL
nyc_df$Phone <- NULL
nyc_df$Categories<- NULL
#The columns with binary values should become factors
nyc_df[,c(3,11:31)]<- lapply(nyc_df[,c(3,11:31)], function(col) factor(col))
#Make columns their appropriate types
nyc_df$Rating <- as.factor(nyc_df$Rating)
nyc_df$Authenticity <- as.numeric(nyc_df$Authenticity)
nyc_df$Restaurant <- as.numeric(nyc_df$Restaurant)
nyc_df$chain<- as.numeric(nyc_df$chain)
raleigh<- predictors[predictors$source=="raleigh_boba",1:15]
rownames(raleigh) <- 1:nrow(raleigh)
raleigh_rating<- predictors$Rating[predictors$source == "raleigh_boba"]
all_cat1<- unlist(strsplit(raleigh$Categories, ","))
all_cat1 <- str_trim(all_cat1)
unique(all_cat1)
#16 unique categories
clean_names1 <-janitor::make_clean_names(unique(all_cat1))
var1 <- paste0(clean_names1,"_ind")
mat1<- matrix(0, nrow(raleigh), 16)
colnames(mat1)<- var1
df1 <- data.frame(mat1)
raleigh_df <- cbind(raleigh, df1)
full_names1 <- unique(all_cat1)
for (i in seq_along(1:16)){
for (j in 1:nrow(raleigh)){
raleigh_df[[var1[i]]][j]= grepl(full_names1[i], raleigh$Categories[j])
}
}
#We don't need the following columns, this is what we used to identify the shops and scrape them
raleigh_df$bubble_tea_ind<- NULL
raleigh_df$Phone <- NULL
raleigh_df$Categories<- NULL
#Let's check missing counts before building linear regression
missing_counts <- colSums(is.na(raleigh_df))
missing_counts
#impute the 3 missing street addresses we found
for (col in colnames(raleigh_df)){
count= sum(is.na(raleigh_df[[col]]))
if (count >0){
print(sum(is.na(raleigh_df[[col]])))
raleigh_df[[col]]<- ifelse(is.na(raleigh_df[[col]]),"M", raleigh_df[[col]])
}
}
#Make columns their appropriate types
raleigh_df$Rating <- as.factor(raleigh$Rating)
raleigh_df$Authenticity <- as.numeric(raleigh_df$Authenticity)
raleigh_df$Restaurant <- as.numeric(raleigh_df$Restaurant)
raleigh_df$chain<- as.numeric(raleigh_df$chain)
nyc_df[, c(11:31)] <- lapply(nyc_df[, c(11:31)], function(col) factor(col))
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 11:31)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(2,13:31)])
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
#Make columns their appropriate types
nyc_df$Rating <- as.numeric(nyc_df$Rating)
nyc_df[, c(11:31)] <- lapply(nyc_df[, c(11:31)], function(col) factor(col))
#Do forward selection for the columns that explain rating
full.model.nyc <- lm(Rating ~  ., data = nyc_df[,c(2, 11:31)])
empty.model.nyc <- lm(Rating ~ 1, data = nyc_df[,c(2,13:31)])
for.model.nyc <- step(empty.model.nyc, scope = list(lower = empty.model.nyc, upper = full.model.nyc), direction = "forward", k = 2)
nyc_df
View(nyc_df)
raleigh_df$Rating  <- raleigh_df$Rating -1
unique(raleigh_df$Rating)
raleigh_df$Rating
nyc_df$Rating
library(stringr)
library(dplyr)
#this dataset was scraped to include reviews, longitudes, and latitudes
predictors <- read.csv("/Users/violetevans/xiaolongbao/Data/all_logi.csv")
length(predictors)
predictors
View(predictors$Rating)
predictors$Rating
nyc<- predictors[predictors$source=="nyc_boba", 1:15]
nyc_rating <- predictors$Rating[predictors$source == "nyc_boba"]
all_cat<- unlist(strsplit(nyc$Categories, ","))
all_cat<- str_trim(all_cat)
#26 unique categories
clean_names <- janitor::make_clean_names(unique(all_cat))
mat=  matrix(0, nrow(nyc), 19)
df <- data.frame(mat)
for (i in seq_along(1:19)){
for (j in 1:nrow(nyc)){
nyc_df[[var[i]]][j]= grepl(full_names[i], nyc$Categories[j])
}
}
head(nyc_df)
#check for missing values
missing_counts <- colSums(is.na(nyc_df))
missing_counts
